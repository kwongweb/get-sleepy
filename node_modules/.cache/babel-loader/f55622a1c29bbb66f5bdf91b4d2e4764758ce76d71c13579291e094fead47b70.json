{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kobyw\\\\Documents\\\\478-breathing-timer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst phases = [{\n  name: \"Inhale\",\n  duration: 4\n}, {\n  name: \"Hold\",\n  duration: 7\n}, {\n  name: \"Exhale\",\n  duration: 8\n}];\nfunction getTodayKey() {\n  return new Date().toLocaleDateString(\"en-CA\", {\n    timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n  });\n}\nfunction updateLocalStorage(minutes) {\n  const key = getTodayKey();\n  const data = JSON.parse(localStorage.getItem(\"breathingHistory\") || \"{}\");\n  data[key] = (data[key] || 0) + minutes;\n  localStorage.setItem(\"breathingHistory\", JSON.stringify(data));\n}\nfunction fadeOutAudio(audioRef, duration = 1000) {\n  const audio = audioRef.current;\n  const step = 0.05;\n  const fadeInterval = duration / (1 / step);\n  const fade = setInterval(() => {\n    if (audio.volume > step) {\n      audio.volume -= step;\n    } else {\n      audio.volume = 1;\n      audio.pause();\n      audio.currentTime = 0;\n      clearInterval(fade);\n    }\n  }, fadeInterval);\n}\nexport default function BreathingApp() {\n  _s();\n  const [isRunning, setIsRunning] = useState(false);\n  const [meditationTime, setMeditationTime] = useState(1);\n  const [elapsed, setElapsed] = useState(0);\n  const [phaseIndex, setPhaseIndex] = useState(0);\n  const [phaseTimeLeft, setPhaseTimeLeft] = useState(phases[0].duration);\n  const [sessionStarted, setSessionStarted] = useState(false);\n  const [sessionComplete, setSessionComplete] = useState(false);\n  const intervalRef = useRef(null);\n  const inhaleAudio = useRef(new Audio(\"/inhale.mp3\"));\n  const holdAudio = useRef(new Audio(\"/hold.mp3\"));\n  const exhaleAudio = useRef(new Audio(\"/exhale.mp3\"));\n  const finishAudio = useRef(new Audio(\"/finish.mp3\"));\n  const stopAllSounds = () => {\n    [inhaleAudio, holdAudio, exhaleAudio, finishAudio].forEach(ref => {\n      const audio = ref.current;\n      audio.pause();\n      audio.currentTime = 0;\n    });\n  };\n  const playAudioForPhase = phaseName => {\n    stopAllSounds();\n    let audio;\n    if (phaseName === \"Inhale\") audio = inhaleAudio.current;else if (phaseName === \"Hold\") audio = holdAudio.current;else if (phaseName === \"Exhale\") audio = exhaleAudio.current;\n    if (audio) {\n      audio.currentTime = 0;\n      audio.volume = 1;\n      audio.play().catch(e => console.warn(\"Audio play interrupted:\", e));\n    }\n  };\n  useEffect(() => {\n    if (isRunning && !sessionComplete) {\n      intervalRef.current = setInterval(() => {\n        setPhaseTimeLeft(prev => {\n          if (prev > 1) return prev - 1;\n          setPhaseIndex(prevIndex => {\n            const nextIndex = (prevIndex + 1) % phases.length;\n            const nextPhase = phases[nextIndex];\n            setPhaseTimeLeft(nextPhase.duration);\n            playAudioForPhase(nextPhase.name);\n            if (nextIndex === 0) {\n              setElapsed(prevElapsed => {\n                const nextElapsed = prevElapsed + phases.reduce((a, b) => a + b.duration, 0);\n                if (nextElapsed >= meditationTime * 60) {\n                  setIsRunning(false);\n                  setSessionComplete(true);\n                  updateLocalStorage(meditationTime);\n                  stopAllSounds();\n                  finishAudio.current.currentTime = 0;\n                  finishAudio.current.volume = 1;\n                  finishAudio.current.play().catch(e => console.warn(\"Finish audio play interrupted:\", e));\n                }\n                return nextElapsed;\n              });\n            }\n            return nextIndex;\n          });\n          return 0;\n        });\n        setElapsed(prevElapsed => prevElapsed + 1);\n      }, 1000);\n    }\n    return () => clearInterval(intervalRef.current);\n  }, [isRunning, meditationTime, sessionComplete]);\n  const startMeditation = () => {\n    stopAllSounds();\n    setElapsed(0);\n    setPhaseIndex(0);\n    setPhaseTimeLeft(phases[0].duration);\n    setIsRunning(true);\n    setSessionStarted(true);\n    setSessionComplete(false);\n    playAudioForPhase(\"Inhale\");\n  };\n  const togglePause = () => {\n    if (isRunning) {\n      clearInterval(intervalRef.current);\n      stopAllSounds();\n    } else {\n      playAudioForPhase(phases[phaseIndex].name);\n    }\n    setIsRunning(prev => !prev);\n  };\n  const todayKey = getTodayKey();\n  const history = JSON.parse(localStorage.getItem(\"breathingHistory\") || \"{}\");\n  const todayMinutes = history[todayKey] || 0;\n  const timeRemaining = Math.max(meditationTime * 60 - elapsed, 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Time to Get Sleepy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"subtext\",\n      children: [\"Today\\u2019s total: \", todayMinutes, \" minute(s)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"label\",\n        children: \"Duration (minutes)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: meditationTime,\n        onChange: e => setMeditationTime(Number(e.target.value)),\n        min: 1,\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), !isRunning && !sessionStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button start\",\n      onClick: startMeditation,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this), sessionStarted && !sessionComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"session\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"phase-name\",\n        children: phases[phaseIndex].name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"phase-timer\",\n        children: [phaseTimeLeft, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"time-remaining\",\n        children: [\"Time remaining: \", Math.floor(timeRemaining / 60), \":\", (timeRemaining % 60).toString().padStart(2, \"0\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button pause\",\n        onClick: togglePause,\n        children: isRunning ? \"Pause\" : \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this), sessionComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"session-complete\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"complete-text\",\n        children: \"Session complete. \\uD83E\\uDDD8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button start\",\n        onClick: startMeditation,\n        children: \"Start Another Session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s(BreathingApp, \"MM3mW4z+mabYcBQ5yop9T9jKny4=\");\n_c = BreathingApp;\nvar _c;\n$RefreshReg$(_c, \"BreathingApp\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","phases","name","duration","getTodayKey","Date","toLocaleDateString","timeZone","Intl","DateTimeFormat","resolvedOptions","updateLocalStorage","minutes","key","data","JSON","parse","localStorage","getItem","setItem","stringify","fadeOutAudio","audioRef","audio","current","step","fadeInterval","fade","setInterval","volume","pause","currentTime","clearInterval","BreathingApp","_s","isRunning","setIsRunning","meditationTime","setMeditationTime","elapsed","setElapsed","phaseIndex","setPhaseIndex","phaseTimeLeft","setPhaseTimeLeft","sessionStarted","setSessionStarted","sessionComplete","setSessionComplete","intervalRef","inhaleAudio","Audio","holdAudio","exhaleAudio","finishAudio","stopAllSounds","forEach","ref","playAudioForPhase","phaseName","play","catch","e","console","warn","prev","prevIndex","nextIndex","length","nextPhase","prevElapsed","nextElapsed","reduce","a","b","startMeditation","togglePause","todayKey","history","todayMinutes","timeRemaining","Math","max","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","Number","target","min","onClick","floor","toString","padStart","_c","$RefreshReg$"],"sources":["C:/Users/kobyw/Documents/478-breathing-timer/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./index.css\";\r\n\r\nconst phases = [\r\n  { name: \"Inhale\", duration: 4 },\r\n  { name: \"Hold\", duration: 7 },\r\n  { name: \"Exhale\", duration: 8 },\r\n];\r\n\r\nfunction getTodayKey() {\r\n  return new Date().toLocaleDateString(\"en-CA\", { timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone });\r\n}\r\n\r\nfunction updateLocalStorage(minutes) {\r\n  const key = getTodayKey();\r\n  const data = JSON.parse(localStorage.getItem(\"breathingHistory\") || \"{}\");\r\n  data[key] = (data[key] || 0) + minutes;\r\n  localStorage.setItem(\"breathingHistory\", JSON.stringify(data));\r\n}\r\n\r\nfunction fadeOutAudio(audioRef, duration = 1000) {\r\n  const audio = audioRef.current;\r\n  const step = 0.05;\r\n  const fadeInterval = duration / (1 / step);\r\n\r\n  const fade = setInterval(() => {\r\n    if (audio.volume > step) {\r\n      audio.volume -= step;\r\n    } else {\r\n      audio.volume = 1;\r\n      audio.pause();\r\n      audio.currentTime = 0;\r\n      clearInterval(fade);\r\n    }\r\n  }, fadeInterval);\r\n}\r\n\r\nexport default function BreathingApp() {\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [meditationTime, setMeditationTime] = useState(1);\r\n  const [elapsed, setElapsed] = useState(0);\r\n  const [phaseIndex, setPhaseIndex] = useState(0);\r\n  const [phaseTimeLeft, setPhaseTimeLeft] = useState(phases[0].duration);\r\n  const [sessionStarted, setSessionStarted] = useState(false);\r\n  const [sessionComplete, setSessionComplete] = useState(false);\r\n  const intervalRef = useRef(null);\r\n\r\n  const inhaleAudio = useRef(new Audio(\"/inhale.mp3\"));\r\n  const holdAudio = useRef(new Audio(\"/hold.mp3\"));\r\n  const exhaleAudio = useRef(new Audio(\"/exhale.mp3\"));\r\n  const finishAudio = useRef(new Audio(\"/finish.mp3\"));\r\n\r\n  const stopAllSounds = () => {\r\n    [inhaleAudio, holdAudio, exhaleAudio, finishAudio].forEach(ref => {\r\n      const audio = ref.current;\r\n      audio.pause();\r\n      audio.currentTime = 0;\r\n    });\r\n  };\r\n\r\n  const playAudioForPhase = (phaseName) => {\r\n    stopAllSounds();\r\n    let audio;\r\n    if (phaseName === \"Inhale\") audio = inhaleAudio.current;\r\n    else if (phaseName === \"Hold\") audio = holdAudio.current;\r\n    else if (phaseName === \"Exhale\") audio = exhaleAudio.current;\r\n\r\n    if (audio) {\r\n      audio.currentTime = 0;\r\n      audio.volume = 1;\r\n      audio.play().catch((e) => console.warn(\"Audio play interrupted:\", e));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isRunning && !sessionComplete) {\r\n      intervalRef.current = setInterval(() => {\r\n        setPhaseTimeLeft((prev) => {\r\n          if (prev > 1) return prev - 1;\r\n\r\n          setPhaseIndex((prevIndex) => {\r\n            const nextIndex = (prevIndex + 1) % phases.length;\r\n            const nextPhase = phases[nextIndex];\r\n            setPhaseTimeLeft(nextPhase.duration);\r\n            playAudioForPhase(nextPhase.name);\r\n\r\n            if (nextIndex === 0) {\r\n              setElapsed((prevElapsed) => {\r\n                const nextElapsed = prevElapsed + phases.reduce((a, b) => a + b.duration, 0);\r\n                if (nextElapsed >= meditationTime * 60) {\r\n                  setIsRunning(false);\r\n                  setSessionComplete(true);\r\n                  updateLocalStorage(meditationTime);\r\n                  stopAllSounds();\r\n                  finishAudio.current.currentTime = 0;\r\n                  finishAudio.current.volume = 1;\r\n                  finishAudio.current.play().catch((e) => console.warn(\"Finish audio play interrupted:\", e));\r\n                }\r\n                return nextElapsed;\r\n              });\r\n            }\r\n\r\n            return nextIndex;\r\n          });\r\n\r\n          return 0;\r\n        });\r\n\r\n        setElapsed((prevElapsed) => prevElapsed + 1);\r\n      }, 1000);\r\n    }\r\n\r\n    return () => clearInterval(intervalRef.current);\r\n  }, [isRunning, meditationTime, sessionComplete]);\r\n\r\n  const startMeditation = () => {\r\n    stopAllSounds();\r\n    setElapsed(0);\r\n    setPhaseIndex(0);\r\n    setPhaseTimeLeft(phases[0].duration);\r\n    setIsRunning(true);\r\n    setSessionStarted(true);\r\n    setSessionComplete(false);\r\n    playAudioForPhase(\"Inhale\");\r\n  };\r\n\r\n  const togglePause = () => {\r\n    if (isRunning) {\r\n      clearInterval(intervalRef.current);\r\n      stopAllSounds();\r\n    } else {\r\n      playAudioForPhase(phases[phaseIndex].name);\r\n    }\r\n    setIsRunning((prev) => !prev);\r\n  };\r\n\r\n  const todayKey = getTodayKey();\r\n  const history = JSON.parse(localStorage.getItem(\"breathingHistory\") || \"{}\");\r\n  const todayMinutes = history[todayKey] || 0;\r\n\r\n  const timeRemaining = Math.max(meditationTime * 60 - elapsed, 0);\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <h1 className=\"title\">Time to Get Sleepy</h1>\r\n      <p className=\"subtext\">Today’s total: {todayMinutes} minute(s)</p>\r\n\r\n      <div className=\"input-group\">\r\n        <label className=\"label\">Duration (minutes)</label>\r\n        <input\r\n          type=\"number\"\r\n          value={meditationTime}\r\n          onChange={(e) => setMeditationTime(Number(e.target.value))}\r\n          min={1}\r\n          className=\"input\"\r\n        />\r\n      </div>\r\n\r\n      {!isRunning && !sessionStarted && (\r\n        <button className=\"button start\" onClick={startMeditation}>Start</button>\r\n      )}\r\n\r\n      {sessionStarted && !sessionComplete && (\r\n        <div className=\"session\">\r\n          <p className=\"phase-name\">{phases[phaseIndex].name}</p>\r\n          <p className=\"phase-timer\">{phaseTimeLeft}s</p>\r\n          <p className=\"time-remaining\">\r\n            Time remaining: {Math.floor(timeRemaining / 60)}:{(timeRemaining % 60).toString().padStart(2, \"0\")}\r\n          </p>\r\n          <button className=\"button pause\" onClick={togglePause}>\r\n            {isRunning ? \"Pause\" : \"Resume\"}\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {sessionComplete && (\r\n        <div className=\"session-complete\">\r\n          <p className=\"complete-text\">Session complete. 🧘</p>\r\n          <button className=\"button start\" onClick={startMeditation}>Start Another Session</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}